import csv
import pyxploitdb
from urllib.request import urlretrieve
import os 
import shutil
import colorama
import threading
import queue

# This script is to be run after wes.py been run and generated vulnerabilities.csv

dir_path = os.path.dirname(os.path.realpath(__file__))

def clear_exploits():
    folder = dir_path + '/exploits'
    for filename in os.listdir(folder):
        file_path = os.path.join(folder, filename)
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)
        except Exception as e:
            print('Failed to delete %s. Reason: %s' % (file_path, e))

def get_all_vulns():
    data = []
    try:
        with open(dir_path + '/wesng/vulnerabilities.csv', 'r') as file:
            csv_reader = csv.DictReader(file)
            for row in csv_reader:
                data.append(row)
            return data
    except:
        print('Error in function get_all_vulns()')
        return data

# Filter vulnerabilties that are either Important or Critical in severity
def get_severe_vulns():
    all_vulns = get_all_vulns()
    severe_vulns = []
    for vuln in all_vulns:
        if vuln['Severity'] == 'Critical' or vuln['Severity'] == 'Important':
            severe_vulns.append(vuln)
    return severe_vulns

def get_exploit(cve):

    # Search CVE on Exploit-DB
    result = pyxploitdb.searchCVE(cve)

    # Download exploit from Exploit-DB
    if result:
        exploit_url = result[0].link
        download_url = exploit_url.replace('/exploits/', '/download/')
        try:
            urlretrieve(download_url, dir_path + '/exploits/exploit_' + cve)
            print(colorama.Fore.GREEN + f'{cve:<20} | Exploit Downloaded' + colorama.Style.RESET_ALL)
        except:
            print(colorama.Fore.RED + f'{cve:20} | Exploit Not Found' + colorama.Style.RESET_ALL)
            pass
        return
    
    return

def main():
    clear_exploits()

    vuln_list = get_all_vulns()

    vuln_queue = queue.Queue()
    for vuln in vuln_list:
        if vuln['CVE'][:3] == 'CVE':
            vuln_queue.put(vuln)

    # Find and download exploits
    threads = []
    while not vuln_queue.empty():
        vuln = vuln_queue.get()
        cve = vuln['CVE']
        t = threading.Thread(target=get_exploit, args=(cve,))
        t.start()
        threads.append(t)

    # Wait for all threads to complete
    for t in threads:
        t.join()


main()