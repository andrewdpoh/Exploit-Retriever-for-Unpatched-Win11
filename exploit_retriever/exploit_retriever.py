from urllib.request import urlretrieve
import os 
import shutil
import colorama
import threading
import queue
import requests
import json
import csv
import pyxploitdb

dir_path = os.path.dirname(os.path.realpath(__file__))

def clear_exploits():
    print(colorama.Fore.YELLOW + 'Clearing exploits folder...' + colorama.Style.RESET_ALL)
    folder = dir_path + '/exploits'
    for filename in os.listdir(folder):
        file_path = os.path.join(folder, filename)
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)

        except Exception as e:
            print('Failed to delete %s. Reason: %s' % (file_path, e))
    
    print('Exploits folder cleared\n')

    return

def calculate_CPE():
    print(colorama.Fore.YELLOW + 'Finding CPE...'+ colorama.Style.RESET_ALL)
    try:
        with open(dir_path + '\sysinfo.txt','r') as f:
            sysinfo = f.readlines()
            build = sysinfo[0]
            arch = sysinfo[1]
            build_num = build[27:-2]

            match build_num[5:10]:
                case '22641':
                    ver = '24H2'
                case '22635':
                    ver = '23H2_beta'
                case '22631':
                    ver = '23H2'
                case '22621':
                    ver = '22H2'
                case '22000':
                    ver = '21H2'
                case _:
                    print('Cannot get CPE due to invalid build number')
                    return

            if 'AMD64' in arch:
                arch = 'x64'
            elif 'AMD86' in arch:
                arch = 'x86'
            elif 'ARM' in arch:
                arch = 'arm64'
            else:
                print('Cannot get CPE due to invalid architecture')
                return
            
            cpe = f'cpe:2.3:o:microsoft:windows_11_{ver}:{build_num}:*:*:*:*:*:{arch}:*'
            print('CPE found:', colorama.Fore.GREEN + cpe + colorama.Style.RESET_ALL)
            print()
            return cpe
    except Exception as e:
        print('Error getting CPE')
        print(e)
        return 'Invalid CPE'

def get_cves(cpe):
    base_url = 'https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName='
    url = base_url + cpe
    response = requests.get(url)

    print(colorama.Fore.YELLOW + 'Retrieving CVEs...' + colorama.Style.RESET_ALL)
    try:
        data = response.json()
    except json.JSONDecodeError:
        print(f'Error decoding JSON for CPE: {cpe}')
        return 0
    
    cves = []
    for vuln in data['vulnerabilities']:
        cve = vuln['cve']
        cve_id = cve['id']

        cve_metric = cve['metrics']['cvssMetricV31'][0]

        base_score = cve_metric['cvssData']['baseScore']
        exploitability_score = cve_metric['exploitabilityScore']
        impact_score = cve_metric['impactScore']
        attack_vector = cve_metric['cvssData']['attackVector']

        cve = {'id':cve_id,'baseScore':base_score,'exploitabilityScore':exploitability_score,'impactScore':impact_score,'attackVector':attack_vector}
        cves.append(cve)
    print(f'{len(cve)} CVEs retrieved \n')
    return cves

def filter_cves(cves):
    # Filter CVEs for high base score and local attack vector only
    severe_cves = []
    for cve in cves:
        if cve['baseScore'] > 3 and cve['attackVector'] == 'LOCAL':
            severe_cves.append(cve)

    return severe_cves

def read_exploitDB_csv():
    data = []
    try:
        with open(dir_path + '\exploitDB.csv', 'r', encoding='utf-8') as file:
            csv_reader = csv.DictReader(file)
            for row in csv_reader:
                data.append(row)
            return data
    except Exception as e:
        print('Error reading exploitDB.csv')
        print(e)
        return 0
    
def get_exploit_github(cve_id):

    # Search CVE on Github
    api_url = f"https://poc-in-github.motikan2010.net/api/v1/?cve_id={cve_id}"
    response = requests.get(api_url)
    if response.status_code == 200:
        data = response.json()
        if "pocs" in data and data["pocs"]:
            github_urls = [poc["html_url"] for poc in data["pocs"]]
            print(f'{cve_id:<15} | Exploit Found (Github)')
            first_result = github_urls[0]
            return first_result
    return

def get_exploit_exploitDB(cve_id, exploitDB_csv):

    # Search CVE in exploitDB.csv
    for entry in exploitDB_csv:
        if cve_id in entry['codes']: 

            # Search CVE on Exploit-DB
            try: 
                result = pyxploitdb.searchCVE(cve_id)
                print(colorama.Fore.GREEN + f'{cve_id:<15} | Exploit Found (Exploit-DB)' + colorama.Style.RESET_ALL)
            except:
                print('Error in finding exploit on Exploit-DB')
                return

            # Download exploit from Exploit-DB
            if result:
                exploit_url = result[0].link
                download_url = exploit_url.replace('/exploits/', '/download/')
                try:
                    urlretrieve(download_url, dir_path + '/exploits/' + cve_id)
                    print(colorama.Fore.LIGHTBLUE_EX + f'{cve_id:<15} | Exploit Downloaded from Exploit-DB' + colorama.Style.RESET_ALL)
                    return
                except:
                    print('Error in downloading exploit from Exploit-DB')
                    return

def get_exploit(cve_id, exploitDB_csv, github_urls):

    # First check exploitDB, then check github
    if get_exploit_exploitDB(cve_id, exploitDB_csv):
        return
    github_url = get_exploit_github(cve_id)
    if github_url:
        github_urls.append({cve_id:github_url})
        return
    return
    
def main():
    print('------------------------------------------------------------')
    print(colorama.Fore.YELLOW + 'Running exploit retriever...\n' + colorama.Style.RESET_ALL)

    # Get CPE and CVEs
    cpe = calculate_CPE()
    if not cpe:
        print('Exiting exploit retriever')
        return
    cves = get_cves(cpe)
    if not cve:
        print('Exiting exploit retriever')
        return
    filtered_cves = filter_cves(cves)

    # Queue CVEs
    cve_queue = queue.Queue()
    for cve in filtered_cves:
        cve_queue.put(cve)

    # Read exploitDB.csv
    exploitDB_csv = read_exploitDB_csv()
    if not exploitDB_csv:
        print('Exiting exploit retriever')
        return
        
    # Clear exploits folder
    clear_exploits()
    
    # Get exploits (threaded)
    print(colorama.Fore.YELLOW + 'Searching for exploits...' + colorama.Style.RESET_ALL)
    threads = []
    github_urls = []
    while not cve_queue.empty():
        try:
            cve = cve_queue.get()
            cve_id = cve['id']
            t = threading.Thread(target=get_exploit, args=(cve_id, exploitDB_csv, github_urls,))
            t.start()
            threads.append(t)
        except:
            print('Error in getting exploit for ', cve_id)
            pass

    # Wait for all threads to complete
    for t in threads:
        t.join()

    # Show exploits downloaded and found
    print('\nExploits downloaded: ')
    exploit_files = os.listdir(dir_path + '\exploits')
    for file in exploit_files:
        print(colorama.Fore.LIGHTBLUE_EX + file + colorama.Style.RESET_ALL)

    print('\nOther exploits found on GitHub:')
    for url in github_urls:
        print(url)

    # Program end message
    print(colorama.Fore.YELLOW + '\nExploit retrieval complete.' + colorama.Style.RESET_ALL)

main()