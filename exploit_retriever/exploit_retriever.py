from urllib.request import urlretrieve
import os 
import shutil
import colorama
import threading
import queue
import requests
import json
import csv
import pyxploitdb
from git import Repo

dir_path = os.path.dirname(os.path.realpath(__file__))

def format_CPE():
	print(colorama.Fore.YELLOW + 'Formatting as CPE...'+ colorama.Style.RESET_ALL)
	try:
		with open(dir_path + '/sysinfo.txt','r') as f:
			sysinfo = f.readlines()
			stripped_sysinfo = []
			for line in sysinfo:
				if len(line) > 1:
					line = line.strip()
					stripped_sysinfo.append(line)
			build = stripped_sysinfo[0]
			arch = stripped_sysinfo[1]
			build_num = build[27:-1]
			print(f'Architecture: {arch}')
			print(f'Build number: {build_num}')
			
			match build_num[5:10]:
				case '22641':
					ver = '24H2'
				case '22635':
					ver = '23H2_beta'
				case '22631':
					ver = '23H2'
				case '22621':
					ver = '22H2'
				case '22000':
					ver = '21H2'
				case _:
					print('Cannot create CPE due to invalid build number')
					return

			if 'AMD64' in arch:
				arch = 'x64'
			elif 'AMD86' in arch:
				arch = 'x86'
			elif 'ARM' in arch:
				arch = 'arm64'
			else:
				print('Cannot create CPE due to invalid architecture')
				return
			
			cpe = f'cpe:2.3:o:microsoft:windows_11_{ver}:{build_num}:*:*:*:*:*:{arch}:*'
			print('CPE:', colorama.Fore.GREEN + cpe + colorama.Style.RESET_ALL)
			print()
			return cpe
	except Exception as e:
		print('Error making CPE')
		print(e)
		return 0

def get_cves(cpe):
	print(colorama.Fore.YELLOW + 'Retrieving CVEs...' + colorama.Style.RESET_ALL)

	base_url = 'https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName='
	url = base_url + cpe
	response = requests.get(url)

	try:
		data = response.json()
	except json.JSONDecodeError:
		print(f'Error decoding JSON for CPE: {cpe}')
		return 0
	
	cves = []
	for vuln in data['vulnerabilities']:
		cve = vuln['cve']
		cve_id = cve['id']

		cve_metric = cve['metrics']['cvssMetricV31'][0]

		base_score = cve_metric['cvssData']['baseScore']
		exploitability_score = cve_metric['exploitabilityScore']
		impact_score = cve_metric['impactScore']
		attack_vector = cve_metric['cvssData']['attackVector']

		cve = {'id':cve_id,'baseScore':base_score,'exploitabilityScore':exploitability_score,'impactScore':impact_score,'attackVector':attack_vector}
		cves.append(cve)
	
	for cve in cves:
		print(cve)
	print(f'{len(cves)} CVEs retrieved\n')

	return cves

def read_exploitDB_csv():
	data = []
	try:
		with open(dir_path + '/exploitDB.csv', 'r', encoding='utf-8') as file:
			csv_reader = csv.DictReader(file)
			for row in csv_reader:
				data.append(row)
			return data
	except Exception as e:
		print('Error reading exploitDB.csv')
		print(e)
		return 0
	
def get_exploit_github(cve_id):

	# Search CVE on Github
	api_url = f"https://poc-in-github.motikan2010.net/api/v1/?cve_id={cve_id}"
	try:
		response = requests.get(api_url)
		if response.status_code == 200:
			data = response.json()
			if "pocs" in data and data["pocs"]:
				github_urls = [poc["html_url"] for poc in data["pocs"]]
				no_of_exploits = len(github_urls)
				print(f'{cve_id:<15} | {no_of_exploits} Exploits Found (Github)')
				return github_urls
	except:
		print(f"Error in retrieving exploit for {cve_id}")
		return
	

def get_exploit_exploitDB(cve_id, exploitDB_csv):

	# Search CVE in exploitDB.csv
	for entry in exploitDB_csv:
		if cve_id in entry['codes']: 

			# Search CVE on Exploit-DB
			try: 
				result = pyxploitdb.searchCVE(cve_id)
				print(f'{cve_id:<15} | 1 Exploits Found (Exploit-DB)')
				if result:
					exploit_url = result[0].link
					return exploit_url
				
				return
			except:
				print('Error in finding exploit on Exploit-DB')
				return

def get_exploit(cve_id, exploitDB_csv, all_exploitDB_urls, all_github_urls):

	# First check exploitDB, then check github
	exploitDB_url = get_exploit_exploitDB(cve_id, exploitDB_csv)
	if exploitDB_url:
		all_exploitDB_urls.append({cve_id:exploitDB_url})
		return
	github_urls = get_exploit_github(cve_id)
	if github_urls:
		all_github_urls.append({cve_id:github_urls})
		return
	return
	
def main():

	# Get CPE and CVEs
	cpe = format_CPE()
	if not cpe:
		print('Exiting exploit retriever')
		return
	cves = get_cves(cpe)
	if not cves:
		print('Exiting exploit retriever')
		return

	# Queue CVEs
	cve_queue = queue.Queue()
	for cve in cves:
		cve_queue.put(cve)

	# Read exploitDB.csv
	exploitDB_csv = read_exploitDB_csv()
	if not exploitDB_csv:
		print('Exiting exploit retriever')
		return
	
	# Get exploits (threaded)
	print(colorama.Fore.YELLOW + 'Searching for exploits...' + colorama.Style.RESET_ALL)
	threads = []
	all_github_urls = []
	all_exploitDB_urls = []
	while not cve_queue.empty():
		try:
			cve = cve_queue.get()
			cve_id = cve['id']
			t = threading.Thread(target=get_exploit, args=(cve_id, exploitDB_csv, all_exploitDB_urls, all_github_urls,))
			t.start()
			threads.append(t)
		except:
			print('Error in getting exploit for ', cve_id)
			pass

	# Wait for all threads to complete
	for t in threads:
		t.join()

	print('\nExploits found on GitHub:')
	for url in all_github_urls:
		print(url)
	print('\nExploits found on ExploitDB:')
	for url in all_exploitDB_urls:
		print(url)

	# Program end message
	print(colorama.Fore.YELLOW + '\nExploit retrieval complete.' + colorama.Style.RESET_ALL)

main()